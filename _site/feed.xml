<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/blog/" rel="alternate" type="text/html" /><updated>2020-05-28T10:48:57+02:00</updated><id>http://localhost:4000/blog/feed.xml</id><title type="html">Blog d’une développeuse - Mélanie B.</title><subtitle>Transforme le thé en code</subtitle><entry><title type="html">Créer une API en Node.js avec Hapi et la déployer sur Heroku</title><link href="http://localhost:4000/blog/2020/05/27/first-node-api-with-hapi.html" rel="alternate" type="text/html" title="Créer une API en Node.js avec Hapi et la déployer sur Heroku" /><published>2020-05-27T00:00:00+02:00</published><updated>2020-05-27T00:00:00+02:00</updated><id>http://localhost:4000/blog/2020/05/27/first-node-api-with-hapi</id><content type="html" xml:base="http://localhost:4000/blog/2020/05/27/first-node-api-with-hapi.html">&lt;p&gt;&lt;em&gt;Dans ce tutoriel, nous construisons une API simple en Node.js avec le framework Hapi, nous la testons avec Ngrok et nous la mettons en ligne avec Heroku.
&lt;a href=&quot;https://github.com/MelanieMEB/api-googlesheet-slack/tree/simple-api&quot;&gt;Le code source du tutoriel&lt;/a&gt; est disponible sur github.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;prérequis&quot;&gt;Prérequis&lt;/h2&gt;

&lt;p&gt;Ce tutoriel suppose que vous avez déjà &lt;a href=&quot;https://www.npmjs.com/get-npm&quot;&gt;NPM&lt;/a&gt;, &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node&lt;/a&gt;, et &lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt;. 
Lors de l’écriture de ce tutoriel, Hapi est en version 19.1.1.&lt;/p&gt;

&lt;h2 id=&quot;création-dun-serveur-api-avec-hapi&quot;&gt;Création d’un serveur Api avec Hapi&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://hapi.dev/&quot;&gt;Hapi&lt;/a&gt; est un framework Node permettant de développer une API.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Un autre framework Node très utilisé pour les API est &lt;a href=&quot;https://expressjs.com/fr/&quot;&gt;Express&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;préparer-le-projet-&quot;&gt;Préparer le projet :&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Créer un dossier dans lequel nous allons construire l’API ;&lt;/li&gt;
  &lt;li&gt;Initialiser un nouveau projet : &lt;code class=&quot;highlighter-rouge&quot;&gt;npm init&lt;/code&gt; ;&lt;/li&gt;
  &lt;li&gt;Installer Hapi : &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install --save @hapi/hapi&lt;/code&gt; ;&lt;/li&gt;
  &lt;li&gt;Créer un fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt; : dans le fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; créé lors de l’initialisation, le fichier &lt;em&gt;main&lt;/em&gt; est habituellement le fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;créer-lapi&quot;&gt;Créer l’API&lt;/h3&gt;

&lt;p&gt;Une fois la préparation du projet effectué, nous allons pouvoir écrire dans le fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt; pour créer notre API.&lt;/p&gt;

&lt;p&gt;Le code minimum pour créer le serveur de notre API est :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Hapi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;@hapi/hapi&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// Import de Hapi&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Initialisation d'un nouveau serveur Hapi avec sa configuration&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Hapi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;localhost&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// Démarrage du serveur&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Le serveur est lancé sur %s&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Gestion en cas d'erreur de l'Api&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;unhandledRejection&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Lancement de l'initialisation&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Une fois le fichier complété, vous pouvez lancer &lt;code class=&quot;highlighter-rouge&quot;&gt;node index.js&lt;/code&gt;. Dans la console, vous devriez voir le message &lt;code class=&quot;highlighter-rouge&quot;&gt;Le serveur est lancé sur http://localhost:3000&lt;/code&gt; : votre serveur API est bien lancé en local !&lt;/p&gt;

&lt;h3 id=&quot;ajout-dune-route&quot;&gt;Ajout d’une route&lt;/h3&gt;

&lt;p&gt;Votre API est créé, le serveur se lance, mais ne permet pas de faire grand chose. Pour cela, nous avons besoin d’ajouter une route.
Pour configurer notre route, nous avons besoin de préciser la méthode HTTP utilisé (&lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt;, …), le chemin (&lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt;) et ce que va faire la route (dans le &lt;code class=&quot;highlighter-rouge&quot;&gt;handler&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Notre route renverra le message “Il est 20h : c’est l’heure du thé !” quand nous l’appelerons via &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:3000/tea-time&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Création d'une route GET, que l'on pourra appelé via http://localhost:300/tea-time&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/tea-time&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`Il est &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getHours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;h : c'est l'heure du thé !`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Une fois la route créé, vous pouvez de nouveau lancer le serveur, et lancer votre navigateur avec comme url  &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:3000/tea-time&lt;/code&gt;. Le message apparait !&lt;/p&gt;

&lt;h3 id=&quot;encore-quelques-modifications-pour-finir&quot;&gt;Encore quelques modifications pour finir&lt;/h3&gt;

&lt;p&gt;Pour finaliser votre API avant de la mettre en ligne, je vous propose quelques modifications :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Changer la façon dont vous lancez l’api : dans le fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;, ajouter la commande &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;start&quot;: &quot;node index.js&quot;&lt;/code&gt; dans la partie &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt; pour permettre de lancer votre API via &lt;code class=&quot;highlighter-rouge&quot;&gt;npm start&lt;/code&gt; directement.&lt;/li&gt;
  &lt;li&gt;Pouvoir préciser le host et le port plus facilement : en début de fichier, ajouter les deux variables &lt;code class=&quot;highlighter-rouge&quot;&gt;const host = process.env.HOST || '127.0.0.1';&lt;/code&gt; et &lt;code class=&quot;highlighter-rouge&quot;&gt;const port = process.env.PORT || 3000;&lt;/code&gt;, et initialiser votre serveur avec &lt;code class=&quot;highlighter-rouge&quot;&gt;const server = Hapi.server({ port, host });&lt;/code&gt;. En plus de simplifier la lecture, cela permettra à l’hébergeur de votre serveur API de changer le host et le port au besoin.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tester-son-serveur-api-local-comme-sil-était-en-ligne&quot;&gt;Tester son serveur Api local comme s’il était en ligne&lt;/h2&gt;

&lt;p&gt;Vous êtes fière de votre mini-api mais vos amis ne peuvent pas aller sur localhost ? Que cela ne tienne, vous pouvez avoir une URL disponible pour votre API en local.
Pour cela, nous allons utiliser le service &lt;a href=&quot;https://ngrok.com/&quot;&gt;Ngrok&lt;/a&gt;. Ce service permet d’avoir rapidement une URL qui pointe vers votre localhost. Cela permet de tester simplement en ligne son API hébergé en local, sans avoir à la déployer.&lt;/p&gt;

&lt;p&gt;Pour pouvoir utiliser ce service, il faut :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Se créer un compte sur &lt;a href=&quot;https://ngrok.com/&quot;&gt;Ngrok&lt;/a&gt; ;&lt;/li&gt;
  &lt;li&gt;Une fois connectée, suivre les indications sur la page d’accueil : installer ngrok et se connecter à votre compte via &lt;code class=&quot;highlighter-rouge&quot;&gt;./ngrok authtoken VOTRE_TOKEN&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vous pouvez alors demander à Ngrok une URL pour votre API :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Lancer votre API : &lt;code class=&quot;highlighter-rouge&quot;&gt;npm start&lt;/code&gt; ;&lt;/li&gt;
  &lt;li&gt;Lancer Ngrok : &lt;code class=&quot;highlighter-rouge&quot;&gt;./ngrok http 3000&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ngrok crée alors un tunnel vers votre localhost. Il vous suffit ensuite d’utiliser l’URL indiqué dans la partie &lt;em&gt;Forwarding&lt;/em&gt; de la sortie de Ngrok.&lt;/p&gt;

&lt;p&gt;Ainsi, votre serveur API hébergé en local est disponible dans le monde entier. Très pratique pour tester !&lt;/p&gt;

&lt;h2 id=&quot;déployer-sur-heroku&quot;&gt;Déployer sur Heroku&lt;/h2&gt;

&lt;p&gt;Votre PC ne peut pas être toujours allumé, et pour cela il va falloir l’héberger ailleur. 
Je vous propose ici de déployer votre application sur &lt;a href=&quot;https://www.heroku.com/&quot;&gt;Heroku&lt;/a&gt;.
Heroku est une Plateforme en tant que Service (PaaS) qui vous permet de déployer des applications sur le Cloud très facilement. Il est possible de créer gratuitement un compte et d’héberger plusieurs applications gratuitement (mais avec des limitations : voir &lt;a href=&quot;https://www.heroku.com/free&quot;&gt;le plan gratuit heroku&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A noter dans les limitations : l’application se met en veille automatiquement après 30 minutes d’inactivité. Le prochain appel sera plus long que d’habitude, voir terminera en _timeout&lt;/em&gt;. Le plan gratuit de Heroku convient pour une utilisation personnelle ou de test._&lt;/p&gt;

&lt;p&gt;Pour déployer notre mini-api, il faut :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Se créer un compte sur &lt;a href=&quot;https://www.heroku.com/&quot;&gt;Heroku&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Une fois connecté, cliquer sur &lt;em&gt;New&lt;/em&gt; &amp;gt; &lt;em&gt;Create new app&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Choisir un nom d’application et votre région, puis cliquer sur &lt;em&gt;Create app&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Une fois sur l’interface, vous pouvez configurer votre application. 
Pour la déployer, vous pouvez utiliser le Heroku CLI ou Github, nous allons utiliser le &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Heroku CLI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Pour déployer :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Suiver les instructions du Heroku CLI pour l’installer ;&lt;/li&gt;
  &lt;li&gt;Suiver ensuite les instructions que vous avez sur la page principale de votre application.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ces instructions sont :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Se connecter à heroku via le CLI : &lt;code class=&quot;highlighter-rouge&quot;&gt;heroku login&lt;/code&gt; ;&lt;/li&gt;
  &lt;li&gt;Initialiser git dans votre projet (dans le dossier de votre api) : &lt;code class=&quot;highlighter-rouge&quot;&gt;git init&lt;/code&gt; ;&lt;/li&gt;
  &lt;li&gt;Puis lier à heroku via &lt;code class=&quot;highlighter-rouge&quot;&gt;heroku git:remote -a NOM_DE_VOTRE_APP&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Avant de déployer notre application, nous allons voir dans la documentation de Heroku la configuration minimale pour que notre API fonctionne.
La &lt;a href=&quot;https://devcenter.heroku.com/articles/getting-started-with-nodejs#prepare-the-app&quot;&gt;documentation de Heroku pour Node.js&lt;/a&gt; nous propose de cloner le &lt;a href=&quot;https://github.com/heroku/node-js-getting-started&quot;&gt;projet Github node-js-getting-started&lt;/a&gt;. Ce projet est une API en Node avec Express.
Même si ce n’est pas le même framework, ce n’est pas grave. Nous pouvons quand même analyser comment le serveur est créé.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Si nous regardons le fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;, nous voyons que &lt;code class=&quot;highlighter-rouge&quot;&gt;npm start&lt;/code&gt; lance le fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt; (comme nous, c’est pratique !)&lt;/li&gt;
  &lt;li&gt;Dans le fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt;, nous voyons que la seule variable de configuration du fichier est &lt;code class=&quot;highlighter-rouge&quot;&gt;const PORT = process.env.PORT || 5000&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dans notre cas, nous avons le port et le host. Nous allons modifier notre fichier pour ne préciser que le port lors de la création de notre API. 
Lors de l’initialisation de notre serveur, nous aurons alors &lt;code class=&quot;highlighter-rouge&quot;&gt;const server = Hapi.server({ port });&lt;/code&gt;, et la variable &lt;code class=&quot;highlighter-rouge&quot;&gt;HOST&lt;/code&gt; peut être supprimée.&lt;/p&gt;

&lt;p&gt;Notre application est maintenant prête pour Heroku !&lt;/p&gt;

&lt;p&gt;Pour déployer enfin votre application, il faut faire un commit git et &lt;em&gt;push&lt;/em&gt; sur heroku :&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add .
git commit -m &quot;Premier commit et je deploie&quot;
git push heroku master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lorsque vous lancez &lt;code class=&quot;highlighter-rouge&quot;&gt;git push heroku master&lt;/code&gt;, votre code est envoyé à Heroku et votre application va être déployé.
Heroku va automatiquement voir que votre projet est un projet Node.js, il va pouvoir lancer &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt; pour installer les dépendances, et lancer ensuite &lt;code class=&quot;highlighter-rouge&quot;&gt;npm start&lt;/code&gt; (défini précédemment dans notre &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;), qui est la commande de base pour les applications Node.js.&lt;/p&gt;

&lt;p&gt;Maintenant, retournons sur le site de Heroku, dans la partie &lt;em&gt;Activity&lt;/em&gt; de notre application. Si tout va bien, la dernière activité indique &lt;em&gt;Deployed&lt;/em&gt;.
Vous pouvez cliquer sur le bouton &lt;em&gt;Open app&lt;/em&gt; présent en haut à droite sur Heroku, et ajouter à l’URL le &lt;em&gt;path&lt;/em&gt; de votre route (https://VOTRE_APP_HEROKU.herokuapp.com/tea-time) pour retrouver l’heure du thé ;)&lt;/p&gt;

&lt;h3 id=&quot;mais-ce-nest-pas-la-bonne-heure-pour-le-thé-&quot;&gt;Mais ce n’est pas la bonne heure pour le thé !&lt;/h3&gt;

&lt;p&gt;Si vous testez l’application présentée ici, vous pouvez avoir un décalage horaire. En effet, le &lt;code class=&quot;highlighter-rouge&quot;&gt;new Date()&lt;/code&gt; dans notre API dépend de l’heure du serveur. En local, l’heure est celle de votre ordinateur. Sur Heroku, ce sera l’heure du serveur de Heroku. Pour cela, il faut changer la Timezone de Heroku.
Vous pouvez la modifier en utilisant le CLI Heroku, avec &lt;code class=&quot;highlighter-rouge&quot;&gt;heroku config:add TZ=&quot;Europe/Paris&quot;&lt;/code&gt; : cette commande va ajouter une variable d’environnement pour Heroku, qui s’alignera alors sur l’heure française. Cette commande va aussi redémarrer l’application pour que toutes les modifications de variables d’environnement soit pris en compte. 
Tout est redevenu normal !&lt;/p&gt;

&lt;h2 id=&quot;amusez-vous-&quot;&gt;Amusez-vous !&lt;/h2&gt;

&lt;p&gt;Dans ce tutoriel, nous avons pu voir comment créer une API en 5 minutes, mais aussi comment la tester et comment la déployer. Une API peut être longue à développer, car elle contient le plus souvent la logique des applications. 
Mais avec ces briques de bases, vous avez ce qu’il faut pour créer des API. Amusez-vous avez ces outils et n’hésitez pas à lire la documentation quand vous utilisez de nouveaux framework, outils, services.&lt;/p&gt;

&lt;h2 id=&quot;ressources&quot;&gt;Ressources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hapi.dev/&quot;&gt;Documentation Hapi&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ngrok.com/&quot;&gt;Ngrok&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.heroku.com/&quot;&gt;Heroku&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/MelanieMEB/api-googlesheet-slack/tree/simple-api&quot;&gt;Le code source du tutoriel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="API" /><category term="Node" /><category term="HAPI" /><summary type="html">Dans ce tutoriel, nous construisons une API simple en Node.js avec le framework Hapi, nous la testons avec Ngrok et nous la mettons en ligne avec Heroku. Le code source du tutoriel est disponible sur github.</summary></entry><entry><title type="html">Comment utiliser l’API Google Sheet</title><link href="http://localhost:4000/blog/2020/04/29/use-google-sheet-as-api.html" rel="alternate" type="text/html" title="Comment utiliser l'API Google Sheet" /><published>2020-04-29T00:00:00+02:00</published><updated>2020-04-29T00:00:00+02:00</updated><id>http://localhost:4000/blog/2020/04/29/use-google-sheet-as-api</id><content type="html" xml:base="http://localhost:4000/blog/2020/04/29/use-google-sheet-as-api.html">&lt;p&gt;&lt;em&gt;Dans cette article, je décris une méthode simple pour récupérer les informations d’un Google Sheet via l’API de Google. Je considère ici que vous avez déjà un compte Google.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;créer-son-google-sheet&quot;&gt;Créer son Google Sheet&lt;/h2&gt;

&lt;p&gt;La première étape est de créer un &lt;a href=&quot;https://docs.google.com/spreadsheets/&quot;&gt;Google Sheet&lt;/a&gt; avec les informations que vous souhaitez remonter. 
Ces informations peuvent être sur des feuilles différentes, et il est possible d’utiliser la première ligne comme &lt;em&gt;header&lt;/em&gt;.
Une fois le document créé, il faudra le partager pour le rendre &lt;strong&gt;Visible en Lecture&lt;/strong&gt; aux utilisateurs possédant le lien.&lt;/p&gt;

&lt;h2 id=&quot;créer-une-clé-api&quot;&gt;Créer une clé API&lt;/h2&gt;

&lt;p&gt;Pour pouvoir appeler l’API Google pour lire notre Google Sheet, il faut une clé API. Pour cela, il faut se rendre sur le &lt;a href=&quot;https://console.cloud.google.com&quot;&gt;Google Cloud Platform&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sur Google Cloud Platform :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Créez un projet&lt;/li&gt;
  &lt;li&gt;Dans les API proposées, cherchez et activez l’API &lt;em&gt;Google Sheets API&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Allez dans la partie Identifiants de votre projet&lt;/li&gt;
  &lt;li&gt;Cliquez sur “Créer des identifiants” et choisissez “Clé API”&lt;/li&gt;
  &lt;li&gt;Créez et récupérez votre clé API.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Je vous conseille de restreindre l’utilisation de cette clé API pour plus de sécurité.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;appeler-lapi&quot;&gt;Appeler l’API&lt;/h2&gt;

&lt;p&gt;On a maintenant tout ce qu’il faut pour récupérer les informations de notre Google Sheet.&lt;/p&gt;

&lt;p&gt;A l’heure où cette article est écrit, l’URL pour joindre l’API Google Sheets est constitué de cette manière :&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;https://sheets.googleapis.com/v4/spreadsheets/v4/spreadsheets/{ID_SPREADSHEET}/values/{NOM_DE_LA_FEUILLE}!{PLAGE_DE_DONNEES}?key={CLE_API}&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ID_SPREADSHEET&lt;/code&gt; : ID de votre Google Sheet, disponible dans l’URL du document (exemple d’url de document: https://docs.google.com/spreadsheets/d/&lt;em&gt;ID_SPREADSHEET&lt;/em&gt;/edit) ;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NOM_DE_LA_FEUILLE&lt;/code&gt; : Précisez la feuille avec les informations que vous souhaitez récupérer ;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PLAGE_DE_DONNEES&lt;/code&gt; : Précisez la plage des données que vous souhaitez récupérer, comme par exemple &lt;em&gt;A1:F200&lt;/em&gt; ;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CLE_API&lt;/code&gt; : Clé API créé et récupéré dans le point précédent.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Il suffit alors de faire un &lt;em&gt;GET&lt;/em&gt; sur cette url pour récupérer les informations de votre document.&lt;/p&gt;

&lt;p&gt;Par exemple, un appel à &lt;code class=&quot;highlighter-rouge&quot;&gt;https://sheets.googleapis.com/v4/spreadsheets/v4/spreadsheets/XXX123/values/FeuilleExemple!A1:D30?key=YYY234&lt;/code&gt; répondra un JSON de ce format :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;range&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;FeuilleExemple!A1:D30&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;majorDimension&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ROWS&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;values&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Titre&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;URL&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Blog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Mon blog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://melaniemeb.github.io/blog/&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Le thé&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Il faut boire du thé&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://fr.wikipedia.org/wiki/Thé&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Avec, dans la partie &lt;code class=&quot;highlighter-rouge&quot;&gt;values&lt;/code&gt;, un &lt;em&gt;array&lt;/em&gt; pour chaque ligne.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Pour info, les quotas d’utilisation de l’API Google Sheets permettent jusqu’à 500 requêtes par 100 secondes par projets, et 100 requêtes par 100 secondes par utilisateur.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;transformer-la-réponse-en-js&quot;&gt;Transformer la réponse en JS&lt;/h2&gt;

&lt;p&gt;Nous avons maintenant une API pour récupérer nos données déjà utilisables. Pour un confort d’utilisation, je vous propose de transformer la réponse pour récupérer des objets représentants chaque ligne.&lt;/p&gt;

&lt;p&gt;Le code JS :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* Appel API fait précédemment et récupéré dans la variable response*/&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Récupérer les lignes du document&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;titles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Sortir la première ligne qui représente nos titres&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Création d'un tableau qui contiendra nos données&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/* 
    Utilisation de Lodash pour simplifer, avec la méthode zipObject : https://lodash.com/docs/4.17.15#zipObject
    Cette méthode permet de créer des objets avec comme clé les titres des colonnes
  */&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;zipObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;titles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;permet d’avoir :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Titre:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'Blog'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Message:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'Mon&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;blog'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;URL:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'https://melaniemeb.github.io/blog/'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Titre:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'Le&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;thé'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Message:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'Il&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;faut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;boire&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;du&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;thé'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;URL:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'https://fr.wikipedia.org/wiki/Thé'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;ressources&quot;&gt;Ressources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/sheets/api&quot;&gt;Documentation Google Sheet API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="API" /><category term="Google Sheet" /><summary type="html">Dans cette article, je décris une méthode simple pour récupérer les informations d’un Google Sheet via l’API de Google. Je considère ici que vous avez déjà un compte Google.</summary></entry><entry><title type="html">Trouver de nouveaux sujets à découvrir</title><link href="http://localhost:4000/blog/2020/04/13/what-learn-as-front-dev.html" rel="alternate" type="text/html" title="Trouver de nouveaux sujets à découvrir" /><published>2020-04-13T00:00:00+02:00</published><updated>2020-04-13T00:00:00+02:00</updated><id>http://localhost:4000/blog/2020/04/13/what-learn-as-front-dev</id><content type="html" xml:base="http://localhost:4000/blog/2020/04/13/what-learn-as-front-dev.html">&lt;p&gt;&lt;em&gt;Dans cette article, je partage des liens que j’utilise pour savoir quelles connaissances creuser dans mon métier de développeur, notamment dans le domaine du front.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;le-developer-roadmap&quot;&gt;Le &lt;em&gt;Developer RoadMap&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;Le &lt;a href=&quot;https://github.com/kamranahmedse/developer-roadmap&quot;&gt;Developer RoadMap&lt;/a&gt; propose des chemins d’apprentissages pour les développeurs front, back et aussi pour se spécialiser en DevOps. 
J’apprécie le découpage étape par étape et l’idée de détailler les différents sujets sans que ce soit obligatoire dans le chemin qu’ils proposent.
Je ne suis pas totalement en accord avec l’ordre présenté, mais c’est une visualisation très intéressantes des différentes spécialisations.&lt;/p&gt;

&lt;h2 id=&quot;le-front-end-developer-handbook-2019&quot;&gt;Le &lt;em&gt;Front-end Developer Handbook 2019&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;Frontend Masters est une site connu pour ses cours en lignes sur le front. Ils ont rédigé le &lt;a href=&quot;https://frontendmasters.com/books/front-end-handbook/2019/&quot;&gt;Front-end Developer Handbook 2019&lt;/a&gt;, un condensé de ce qu’est un développeur front, mais aussi de toutes les connaissances utiles en 2019. Chaque partie présentent des liens pour découvrir les sujets. S’il fallait créer un cours complet du web front, ce site pourrait en être le sommaire.
Ils reprennent d’ailleurs en partie le Developer RoadMap.&lt;/p&gt;

&lt;h2 id=&quot;les-web-skills&quot;&gt;Les &lt;em&gt;Web Skills&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Il y a tellement de sujet en lien avec le développement web. Le site &lt;a href=&quot;https://andreasbm.github.io/web-skills/&quot;&gt;Web Skills&lt;/a&gt; les rassemblent tous (ou en tout cas une très longue liste). Une liste simple avec des liens pour apprendre. J’apprécie surtout de voir des sujets comme l’accessibilité, le design UX, ou encore l’algorithmie, des sujets souvent mis de coté.&lt;/p&gt;

&lt;h2 id=&quot;le-study-guide-du-mobile-web-specialist-certification-par-google&quot;&gt;Le &lt;em&gt;Study Guide&lt;/em&gt; du &lt;em&gt;Mobile Web Specialist Certification&lt;/em&gt; par Google&lt;/h2&gt;

&lt;p&gt;Google propose de passer une certification &lt;em&gt;Mobile Web Specialist&lt;/em&gt;, très difficile à avoir. Je ne propose pas ici de réussir la certification, mais le &lt;a href=&quot;https://developers.google.com/certification/mobile-web-specialist/study-guide&quot;&gt;guide d’étude pour préparer la certification&lt;/a&gt; donne des indications intéressantes sur les sujets à savoir en tant que développeur web et plus spécifiquement avec la spécialisation Mobile.&lt;/p&gt;

&lt;h2 id=&quot;les-state-of&quot;&gt;Les &lt;em&gt;State of&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;Chaque année, un sondage est réalisé auprès des développeurs web sur le Javascript, et récemment sur le CSS. Le &lt;a href=&quot;https://stateofjs.com/&quot;&gt;State of JS&lt;/a&gt; et le &lt;a href=&quot;https://2019.stateofcss.com/&quot;&gt;State of CSS&lt;/a&gt; sont pour moi une mine d’information : quels sont les dernières tendances ? Quels sujets a été évoqué que je ne connais pas encore ?
Si une proposition du sondage m’est inconnu, c’est l’occasion de découvrir un nouveau sujet !&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Les listes proposées sont souvent longues et peuvent faire peur. Mais face à toutes ces compétences et connaissances à acquérir, il faut se dire deux choses :&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Le développement web est un domaine dans lequel il y a toujours quelque chose à apprendre, même pour les développeurs senior ;&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Ce domaine est si vaste que d’autres développeurs connaitront toujours des choses que vous ne savez pas, mais l’inverse est vrai aussi ! Chaque développeur, même junior, a des compétences et des connaissances à apporter dans tous les projets.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Developpeur" /><summary type="html">Dans cette article, je partage des liens que j’utilise pour savoir quelles connaissances creuser dans mon métier de développeur, notamment dans le domaine du front.</summary></entry><entry><title type="html">Les conflits CSS</title><link href="http://localhost:4000/blog/2020/04/09/css-priority-rules.html" rel="alternate" type="text/html" title="Les conflits CSS" /><published>2020-04-09T00:00:00+02:00</published><updated>2020-04-09T00:00:00+02:00</updated><id>http://localhost:4000/blog/2020/04/09/css-priority-rules</id><content type="html" xml:base="http://localhost:4000/blog/2020/04/09/css-priority-rules.html">&lt;p&gt;&lt;em&gt;Dans cet article, je reviens sur un concept de base du CSS : la gestion des conflits entre deux sélecteurs. Nous parlerons entre autres du concept de spécificité.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Vous pouvez retrouver des exemples en action sur le &lt;a href=&quot;https://codepen.io/melanie_b/pen/gOaYeEE&quot;&gt;CodePen&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;css--comment-css-gère-les-conflits-entre-les-sélecteurs-&quot;&gt;CSS : Comment CSS gère les conflits entre les sélecteurs ?&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Si deux sélecteurs CSS visent une même balise &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, lequel l’emporte en cas de conflit ?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;En CSS, le choix du sélecteur qui l’emporte dépend de trois facteurs :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;L’importance : utilisation du mot clé &lt;code class=&quot;highlighter-rouge&quot;&gt;!important&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;La spécificité&lt;/li&gt;
  &lt;li&gt;L’ordre dans la source : le dernier sélecteur l’emporte&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;L’importance l’emporte sur la spécificité qui l’emporte sur l’ordre.&lt;/p&gt;

&lt;p&gt;Pour une même balise &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt; Ceci est un titre &amp;lt;/div&amp;gt;&lt;/code&gt; :&lt;/p&gt;

&lt;p&gt;Le cas :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;affichera “&lt;span style=&quot;color:blue&quot;&gt; Ceci est un titre &lt;/span&gt;” en bleu, car le sélecteur modifiant le texte en bleu est &lt;em&gt;après&lt;/em&gt; celui modifiant le texte en rouge : l’ordre est pris en compte.&lt;/p&gt;

&lt;p&gt;L’ordre à prendre en compte est celui du fichier CSS. Dans le cas suivant :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.blue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.red&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blue red&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; Texte &lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;red blue&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; Texte &lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Les deux textes seront en rouge car l’ordre dans l’attribut &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; n’a pas d’impact sur la résolution du conflit. Seul l’ordre dans le fichier CSS est pris en compte.&lt;/p&gt;

&lt;p&gt;Regardons maintenant le mot-clé &lt;code class=&quot;highlighter-rouge&quot;&gt;!important&lt;/code&gt; :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;affichera “&lt;span style=&quot;color:red&quot;&gt; Ceci est un titre &lt;/span&gt;” en rouge, car le sélecteur modifiant le texte en rouge utilise le mot clé &lt;code class=&quot;highlighter-rouge&quot;&gt;!important&lt;/code&gt;, qui l’emporte sur l’ordre.&lt;/p&gt;

&lt;p&gt;L’utilisation du mot clé &lt;code class=&quot;highlighter-rouge&quot;&gt;!important&lt;/code&gt; est très contestée : le mot-clé impose ses modifications, il est souvent le signe d’une difficulté à trouver le bon sélecteur pour le style que l’on souhaite donner.
Je partage le point de vue que ce mot-clé ne devrait pas être utilisé.&lt;/p&gt;

&lt;p&gt;Mais que faire alors quand le style que l’on veut donner ne s’affiche pas car il est annulé par un autre sélecteur, ou encore quand l’utilisation d’un framework ou d’un module nous force à utiliser &lt;code class=&quot;highlighter-rouge&quot;&gt;!important&lt;/code&gt; pour imposer notre style ?&lt;/p&gt;

&lt;p&gt;Pour gérer les conflits entre les sélecteurs, il y a l’ordre et l’importance, mais aussi la spécificité.&lt;/p&gt;

&lt;h1 id=&quot;la-spécificité&quot;&gt;La spécificité&lt;/h1&gt;

&lt;p&gt;Le CSS a un système de points donnés à chaque sélecteur. Entre deux sélecteurs, celui avec le nombre de points le plus élevé dans la catégorie la plus haute est considéré comme plus spécifique et gagnera en cas de conflit.
C’est le &lt;strong&gt;principe de spécificité&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Il y a 4 catégories :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Style inline (&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div style=&quot;color: blue&quot;&amp;gt;&lt;/code&gt;) : c’est la catégorie la plus élevée&lt;/li&gt;
  &lt;li&gt;Les IDs (&lt;code class=&quot;highlighter-rouge&quot;&gt;#first-div&lt;/code&gt;) : c’est la seconde catégorie la plus élevée&lt;/li&gt;
  &lt;li&gt;Les classes, pseudo-classes, ou attributes (&lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;:hover&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;[title]&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Les élements ou pseudo-elements (&lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;:after&lt;/code&gt;) : on retrouve ici la catégorie la plus basse.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Il y a donc 4 catégories que nous noterons de cette manière : (style inline, nombre d’ID, nombre de classes, nombre d’élément).&lt;/p&gt;

&lt;p&gt;Pour chaque composant faisant partie d’une catégorie, on ajoute un point dans cette catégorie :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Style inline : (1,0,0,0)&lt;/li&gt;
  &lt;li&gt;Un ID : (0,1,0,0)&lt;/li&gt;
  &lt;li&gt;Une classe, une pseudo-classe ou un attribut : (0,0,1,0)&lt;/li&gt;
  &lt;li&gt;Un élément ou un pseudo-élément : (0,0,0,1)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;quelques-exemples&quot;&gt;Quelques exemples&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.title&lt;/code&gt; : (0,0,1,0)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.title .blue&lt;/code&gt; : (0,0,2,0)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a:hover&lt;/code&gt; : (0,0,1,1)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a[href$='.fr']&lt;/code&gt; : (0,0,1,1)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#global &amp;gt; .class &amp;gt; p&lt;/code&gt; : (0,1,1,1)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;div + p::first-letter&lt;/code&gt; : (0,0,0,3)&lt;/li&gt;
  &lt;li&gt;Entre beaucoup d’éléments et une classe :&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.class&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;C’est la catégorie la plus haute qui gagne : &lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Le sélecteur universel (*) et les combinateurs (+, &amp;gt;, ~) ne changent pas le nombre de points final.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;ressources&quot;&gt;Ressources&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Un &lt;a href=&quot;https://specificity.keegan.st/&quot;&gt;calculateur de spécificité&lt;/a&gt;, pour pouvoir comparer deux sélecteurs et comprendre pourquoi l’un est plus fort que l’autre.&lt;/li&gt;
  &lt;li&gt;Un outils pour &lt;a href=&quot;https://jonassebastianohlsson.com/specificity-graph/&quot;&gt;voir les spécificités pour tout un fichier css&lt;/a&gt;, utile pour analyser tout son fichier CSS.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Le deuxième outils est très utile si vous utilisez &lt;strong&gt;ITCSS&lt;/strong&gt; comme architecture CSS. Dans cette architecture, 
les sélecteurs dans les fichiers CSS sont triés par spécificité, du moins fort au plus fort, et par conséquent du plus général au plus spécifique.&lt;/em&gt;&lt;/p&gt;</content><author><name></name></author><category term="CSS" /><summary type="html">Dans cet article, je reviens sur un concept de base du CSS : la gestion des conflits entre deux sélecteurs. Nous parlerons entre autres du concept de spécificité.</summary></entry><entry><title type="html">Le Console.log et ses déclinaisons</title><link href="http://localhost:4000/blog/2020/04/02/use-console-log.html" rel="alternate" type="text/html" title="Le Console.log et ses déclinaisons" /><published>2020-04-02T00:00:00+02:00</published><updated>2020-04-02T00:00:00+02:00</updated><id>http://localhost:4000/blog/2020/04/02/use-console-log</id><content type="html" xml:base="http://localhost:4000/blog/2020/04/02/use-console-log.html">&lt;p&gt;L’utilisation des &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log&lt;/code&gt; est l’une des approches pour débugger les plus utilisées par les développeurs. La majorité du temps, seule la méthode &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log&lt;/code&gt; est utilisée, alors qu’une palette d’autres possibilités est offertes au développeurs.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Pour voir ces méthodes en action, un &lt;a href=&quot;https://codepen.io/melanie_b/pen/abOxWBw&quot;&gt;CodePen&lt;/a&gt; est disponible. Il faut utiliser la console du navigateur et non celle de CodePen pour voir les résultats.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;préciser-le-type-du-message&quot;&gt;Préciser le type du message&lt;/h1&gt;

&lt;p&gt;Le &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log&lt;/code&gt; est suffisant pour afficher du texte ou des données. Mais si vous souhaitez être plus précis dans vos informations de console, vous pouvez utiliser :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Pour afficher un message.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Pour afficher une information.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Pour afficher un warning.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Pour afficher une erreur.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;les-possibilités-du-consolelog&quot;&gt;Les possibilités du console.log&lt;/h1&gt;

&lt;p&gt;La méthode &lt;code class=&quot;highlighter-rouge&quot;&gt;log&lt;/code&gt; permet d’utiliser des caractères de substitution ou encore d’ajouter du style.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Afficher une string %s &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Afficher un entier %i &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Afficher un nombre réel %f &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;%c Afficher ce texte avec du style &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;background: black; color: yellow;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Pour afficher un objet dans un console.log, il sera souvent recommandé d’utiliser &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log(JSON.parse(JSON.stringify(obj)))&lt;/code&gt; pour s’assurer de voir la valeur de l’objet au moment de l’appel à &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;nettoyer-la-console&quot;&gt;Nettoyer la Console&lt;/h1&gt;

&lt;p&gt;Si trop de messages s’accumulent dans la console, un &lt;code class=&quot;highlighter-rouge&quot;&gt;console.clear()&lt;/code&gt; permet d’effacer les précédents messages.&lt;/p&gt;

&lt;h1 id=&quot;quelle-méthode-utiliser-pour-les-array-object-ou-encore-le-dom-&quot;&gt;Quelle méthode utiliser pour les Array, Object ou encore le DOM ?&lt;/h1&gt;

&lt;p&gt;Pour afficher des Array, des Object ou des DOM, il y a trois méthodes à regarder :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;console.log()&lt;/code&gt; qui retourne l’objet représenté en chaîne de caractère;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;console.dir()&lt;/code&gt; qui retourne l’objet;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;console.table()&lt;/code&gt; qui va afficher un tableau dans la console avec les valeurs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dans le cas d’un Array ou d’un Object, il peut être utile d’utiliser &lt;code class=&quot;highlighter-rouge&quot;&gt;console.table()&lt;/code&gt; pour avoir la vision tableau dans la console, ce qui peut faciliter la lecture pour de petits tableaux ou objets.
La différence entre &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log()&lt;/code&gt; et &lt;code class=&quot;highlighter-rouge&quot;&gt;console.dir()&lt;/code&gt; est à garder en tête, et il serait utile de prendre l’habitude d’utiliser &lt;code class=&quot;highlighter-rouge&quot;&gt;console.dir()&lt;/code&gt; dans ces cas-là.&lt;/p&gt;

&lt;p&gt;Dans le cas du DOM, il est possible d’utiliser &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log()&lt;/code&gt; et &lt;code class=&quot;highlighter-rouge&quot;&gt;console.dir()&lt;/code&gt;. Sous Firefox, les deux méthodes renvoient un objet de type JSON avec toutes les informations de l’élément visé. Par contre, le comportement est différent sous Chrome : &lt;code class=&quot;highlighter-rouge&quot;&gt;console.dir()&lt;/code&gt; a le même comportement, mais  &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log&lt;/code&gt; renvoie un arbre HTML.&lt;/p&gt;

&lt;h1 id=&quot;pouvoir-suivre-ce-qui-se-passe-dans-le-code&quot;&gt;Pouvoir suivre ce qui se passe dans le code&lt;/h1&gt;

&lt;h2 id=&quot;quand-jai-besoin-de-compter&quot;&gt;Quand j’ai besoin de compter&lt;/h2&gt;

&lt;p&gt;La méthode &lt;code class=&quot;highlighter-rouge&quot;&gt;count&lt;/code&gt; permet de compter le nombre de fois où cette méthode a été appelé. Il est possible d’ajouter un label pour suivre le comptage.&lt;/p&gt;

&lt;p&gt;Par exemple :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Compteur &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;va afficher en console :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Compteur : 1
Compteur : 2
Compteur : 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;La méthode &lt;code class=&quot;highlighter-rouge&quot;&gt;console.countReset()&lt;/code&gt; permet de remettre à zéro notre compteur.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;quand-jai-besoin-de-la-stack-trace&quot;&gt;Quand j’ai besoin de la stack trace&lt;/h2&gt;

&lt;p&gt;Pour avoir la stack trace, il y a une méthode, pour ça : &lt;code class=&quot;highlighter-rouge&quot;&gt;console.trace()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Par exemple :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firstFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;secondFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;secondFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;firstFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;va afficher en console :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;console.trace
secondFunction @ index.js:4
firstFunction @ index.js:6
(anonymous) @ index.js:8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;quand-je-veux-faire-des-vérifications&quot;&gt;Quand je veux faire des vérifications&lt;/h2&gt;

&lt;p&gt;Il est possible de faire des assertions directement via une méthode &lt;code class=&quot;highlighter-rouge&quot;&gt;console.assert()&lt;/code&gt;. Cette méthode affichera le résultat seulement si l’assertion est fause.&lt;/p&gt;

&lt;p&gt;Par exemple :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;La variable doit être 2, mais elle a comme valeur : &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;La variable doit être 3, mais elle a comme valeur : &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;va afficher en console :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Assertion failed: La variable doit être 2, mais elle a comme valeur : 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;quand-jai-besoin-de-mesurer-le-temps-passé&quot;&gt;Quand j’ai besoin de mesurer le temps passé&lt;/h2&gt;

&lt;p&gt;Une approche souvent utilisé pour connaître le temps entre deux moments du code est de créer deux &lt;em&gt;timestamps&lt;/em&gt; et de faire une comparaison, qui serait affiché alors avec un &lt;em&gt;console.log&lt;/em&gt;.
Pourtant, il existe des méthodes pour faire ça plus facilement : &lt;code class=&quot;highlighter-rouge&quot;&gt;console.time()&lt;/code&gt; pour lancer le timer et &lt;code class=&quot;highlighter-rouge&quot;&gt;console.timeEnd()&lt;/code&gt;.
Il est possible de préciser un label dans ces méthodes pour pouvoir le nommer et lancer plusieurs timer différents.&lt;/p&gt;

&lt;h1 id=&quot;grouper-mes-consolelog-pour-une-meilleure-visibilité&quot;&gt;Grouper mes console.log pour une meilleure visibilité&lt;/h1&gt;

&lt;p&gt;Si vous aimez avoir un affichage clair et hiérarchisé, vous pouvez grouper les informations que vous remontez via les méthodes de &lt;code class=&quot;highlighter-rouge&quot;&gt;console&lt;/code&gt; en utilisant &lt;code class=&quot;highlighter-rouge&quot;&gt;console.group()&lt;/code&gt; pour grouper les prochains messages jusqu’à l’appel de &lt;code class=&quot;highlighter-rouge&quot;&gt;console.groupEnd()&lt;/code&gt;. Il existe aussi &lt;code class=&quot;highlighter-rouge&quot;&gt;console.groupCollapsed()&lt;/code&gt; pour afficher le groupe réduit dans la console. Ces méthodes prennent aussi des labels pour pouvoir nommer les groupes.&lt;/p&gt;

&lt;p&gt;Par exemple :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Groupe A&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Message 1 de A&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Message 2 de A&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;groupCollapsed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Groupe B&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Message 1 de B&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Message 2 de B&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;groupEnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Message 3 de A&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;groupEnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;va afficher en console :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Groupe A
- Message 1 de A
- Message 2 de A
- Groupe B
- Message 3 de A
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Il faudra déployer le groupe B pour pouvoir voir ses messages.&lt;/p&gt;

&lt;h1 id=&quot;créer-un-profil-de-performance&quot;&gt;Créer un profil de performance&lt;/h1&gt;

&lt;p&gt;Si vous avez besoin d’analyser la performance de votre code, il est possible d’enregistrement un profil de performance, visible dans les outils de performance de Firefox.
Pour lancer l’enregistrement, il faut appeler &lt;code class=&quot;highlighter-rouge&quot;&gt;console.profile('Label du profil')&lt;/code&gt;, et appeler ensuite &lt;code class=&quot;highlighter-rouge&quot;&gt;console.profileEnd('Label du profil')&lt;/code&gt; pour l’arrêter.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Attention, cette méthode n’est pas standard. Éviter de l’oublier dans le code :)&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;ce-que-je-retiens&quot;&gt;Ce que je retiens&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;console.table&lt;/code&gt; offre vraiment une vision utile dans certains cas ;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;console.dir&lt;/code&gt; devrait être plus souvent utilisé sur les Array ou Object ;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;console.time&lt;/code&gt; permet d’éviter de faire des &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log&lt;/code&gt; avec des dates pour mesurer le temps ;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;console.assert&lt;/code&gt; permet d’éviter d’afficher des informations seulement pour vérifier ce qui est attendu.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="JS" /><category term="debug" /><summary type="html">L’utilisation des console.log est l’une des approches pour débugger les plus utilisées par les développeurs. La majorité du temps, seule la méthode console.log est utilisée, alors qu’une palette d’autres possibilités est offertes au développeurs.</summary></entry><entry><title type="html">Retrouver sa clé d’activation Windows sous Linux</title><link href="http://localhost:4000/blog/2019/12/29/cle-windows-sous-linux.html" rel="alternate" type="text/html" title="Retrouver sa clé d'activation Windows sous Linux" /><published>2019-12-29T00:00:00+01:00</published><updated>2019-12-29T00:00:00+01:00</updated><id>http://localhost:4000/blog/2019/12/29/cle-windows-sous-linux</id><content type="html" xml:base="http://localhost:4000/blog/2019/12/29/cle-windows-sous-linux.html">&lt;p&gt;Souvent, lorsqu’on achète un ordinateur, un Windows est installé de base, et on paie pour cette license Windows.&lt;/p&gt;

&lt;p&gt;Mais souvent aussi, on préfère passer sous une distribution Linux, et on écrase totalement le Windows installé.
Et si nous souhaitons ensuite réinstaller notre Windows, nous n’avons pas la clé d’activation.&lt;/p&gt;

&lt;p&gt;Pour récupérer la clé d’activation sous Linux, c’est possible avec cette commande :&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo tail -c +56 /sys/firmware/acpi/tables/MSDM&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Plutôt pratique :)&lt;/p&gt;</content><author><name></name></author><category term="Windows" /><category term="Linux" /><summary type="html">Souvent, lorsqu’on achète un ordinateur, un Windows est installé de base, et on paie pour cette license Windows.</summary></entry><entry><title type="html">Tips CSS: les descendants selectors</title><link href="http://localhost:4000/blog/2019/12/29/css-descendants-selectors.html" rel="alternate" type="text/html" title="Tips CSS: les descendants selectors" /><published>2019-12-29T00:00:00+01:00</published><updated>2019-12-29T00:00:00+01:00</updated><id>http://localhost:4000/blog/2019/12/29/css-descendants-selectors</id><content type="html" xml:base="http://localhost:4000/blog/2019/12/29/css-descendants-selectors.html">&lt;p&gt;&lt;em&gt;Cet article fait suite à l’article &lt;a href=&quot;https://medium.com/@devdevcharlie/things-nobody-ever-taught-me-about-css-5d16be8d5d0e&quot;&gt;source&lt;/a&gt;, 
et j’ai souhaité noter certaines informations que j’ai trouvé utiles.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Les &lt;em&gt;descendant selectors&lt;/em&gt; permettent de préciser que le sélecteur souhaité doit être pris en compte s’il est sous un autre sélecteur précis.
On les écrit en les pensant de gauche à droite, mais ils sont lus de droite à gauche.&lt;/p&gt;

&lt;p&gt;Lorsqu’on sélectionne :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-CSS&quot;&gt;.menu li a {

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On cherchera d’abord :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Tous les liens &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Puis, de ces liens, ceux étant au sein d’une liste &lt;code class=&quot;highlighter-rouge&quot;&gt;li&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Enfin, on regardera ceux appartenant au bloc &lt;code class=&quot;highlighter-rouge&quot;&gt;.menu&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cet ordre contre-intuitif peut expliquer des lenteurs sur le site.
De plus, c’est une autre raison pour créer des classes spécifiques plutôt que d’enchaîner des sélecteurs.&lt;/p&gt;</content><author><name></name></author><category term="CSS" /><summary type="html">Cet article fait suite à l’article source, et j’ai souhaité noter certaines informations que j’ai trouvé utiles.</summary></entry><entry><title type="html">Ouverture du blog</title><link href="http://localhost:4000/blog/2019/12/28/presentation.html" rel="alternate" type="text/html" title="Ouverture du blog" /><published>2019-12-28T00:00:00+01:00</published><updated>2019-12-28T00:00:00+01:00</updated><id>http://localhost:4000/blog/2019/12/28/presentation</id><content type="html" xml:base="http://localhost:4000/blog/2019/12/28/presentation.html">&lt;p&gt;Ca y est, le blog est lancé ! 
C’est toujours difficile de se lancer dans ce type d’aventure. Si je le fais, c’est surtout pour garder de nombreuses informations au même endroit, et pouvoir les partager.&lt;/p&gt;

&lt;p&gt;On va parler ici de développement web, mais pas que !&lt;/p&gt;</content><author><name></name></author><category term="Blog" /><summary type="html">Ca y est, le blog est lancé ! C’est toujours difficile de se lancer dans ce type d’aventure. Si je le fais, c’est surtout pour garder de nombreuses informations au même endroit, et pouvoir les partager.</summary></entry></feed>